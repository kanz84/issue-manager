# Generated by Django 3.1.3 on 2022-08-22 17:25

from django.db import migrations


def insert_initial_data(app, schema):
    User = app.get_model("auth", "User")
    Task = app.get_model("tasks", "Task")

    if not User.objects.filter(username="admin").exists():
        User.objects.create(
            **{
                "password": "pbkdf2_sha256$216000$XjBu0Vo5mJmg$S6+IkMphUXUp+lpMr9oN9vIFDMBEJ0UvHWHSuq1ylLs=",
                "last_login": "2022-07-29T11:37:18.926Z",
                "is_superuser": True,
                "username": "admin",
                "first_name": "",
                "last_name": "",
                "email": "admin@gmail.com",
                "is_staff": True,
                "is_active": True,
                # "groups": [],
                # "user_permissions": []
            }
        )
    if not User.objects.filter(username="user").exists():
        User.objects.create(
            **{
                "password": "pbkdf2_sha256$216000$ACPphoP5FZJv$+96MhP9Ved6WQ9XHyPNz0GbaiCHCTxwflzJ0KB5/+JE=",
                "is_superuser": True,
                "username": "user",
                "first_name": "",
                "last_name": "",
                "email": "",
                "is_staff": True,
                "is_active": True,
                "date_joined": "2022-07-29T11:35:57.306Z",
                # "groups": [],
                # "user_permissions": []
            }
        )

    if not Task.objects.filter(title="Change Logo").exists():
        Task.objects.create(
            **{
                "title": "Change Logo",
                "status": "NS",
                "description": "Change logo to a better icon.",
                "owner_id": 1,
            }
        )

    if not Task.objects.filter(title="Implement the authentication part").exists():
        Task.objects.create(
            **{
                "title": "Implement the authentication part",
                "status": "NS",
                "description": "Implement the authentication part base of docs.",
                "owner_id": 1,
            }
        )


class Migration(migrations.Migration):

    dependencies = [
        ("tasks", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(insert_initial_data),
    ]
